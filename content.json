{"meta":{"title":"Kewei Zhang","subtitle":"Kewei Zhang","description":"Kewei Zhang's homepage","author":"Kewei Zhang (张可为)","url":"https://xiwen1.github.io","root":"/"},"pages":[{"title":"404","date":"2022-12-16T07:07:15.000Z","updated":"2022-12-16T07:08:29.000Z","comments":true,"path":"404/index.html","permalink":"https://xiwen1.github.io/404/index.html","excerpt":"","text":""},{"title":"About Me","date":"2024-03-07T15:20:03.000Z","updated":"2025-03-02T14:15:35.395Z","comments":true,"path":"about/index.html","permalink":"https://xiwen1.github.io/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-12-16T07:06:22.000Z","updated":"2022-12-16T07:09:31.000Z","comments":true,"path":"categories/index.html","permalink":"https://xiwen1.github.io/categories/index.html","excerpt":"","text":""},{"title":"publications","date":"2024-03-07T15:47:12.000Z","updated":"2024-03-07T15:47:12.000Z","comments":true,"path":"publications/index.html","permalink":"https://xiwen1.github.io/publications/index.html","excerpt":"","text":""},{"title":"schedule","date":"2022-12-16T07:10:27.000Z","updated":"2022-12-16T07:11:02.000Z","comments":true,"path":"schedule/index.html","permalink":"https://xiwen1.github.io/schedule/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-12-16T07:06:36.000Z","updated":"2022-12-16T07:06:36.000Z","comments":true,"path":"tags/index.html","permalink":"https://xiwen1.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"home","slug":"home","date":"2024-03-07T15:20:03.000Z","updated":"2025-07-05T03:51:55.242Z","comments":true,"path":"2024/03/07/home/","link":"","permalink":"https://xiwen1.github.io/2024/03/07/home/","excerpt":"Hi there! My name is Kewei Zhang (张可为). I am a third-year CS undergraduate student in the AIM Lab at Wuhan University, under the supervision of Prof. Zheng Wang. My research interests lie in Computer Vision, Trustworthy AI, and Vision-Language Models (VLM). Additionally, I am passionate about AI-driven computer applications and have accumulated technical expertise in AI-related software development. Visit my google scholar profile for most recent publications. For any suggestions or collaborations, please reach out to me at xiwen.kwzhang@gmail.com. 🔥News 7/2025 one paper is accepted by ACM MM 2025. 6/2025 one paper is accepted by ICCV 2025. 10/2024 one paper is accepted by NeurIPS 2024. 9/2024 I am honored to have received the Lei Jun Computer Scholarship (Top 1%). 10/2023 one paper is accepted by ACM MM 2023. 9/2023 I am honored to have received the National Scholarship (Top 1%).","text":"Hi there! My name is Kewei Zhang (张可为). I am a third-year CS undergraduate student in the AIM Lab at Wuhan University, under the supervision of Prof. Zheng Wang. My research interests lie in Computer Vision, Trustworthy AI, and Vision-Language Models (VLM). Additionally, I am passionate about AI-driven computer applications and have accumulated technical expertise in AI-related software development. Visit my google scholar profile for most recent publications. For any suggestions or collaborations, please reach out to me at xiwen.kwzhang@gmail.com. 🔥News 7/2025 one paper is accepted by ACM MM 2025. 6/2025 one paper is accepted by ICCV 2025. 10/2024 one paper is accepted by NeurIPS 2024. 9/2024 I am honored to have received the Lei Jun Computer Scholarship (Top 1%). 10/2023 one paper is accepted by ACM MM 2023. 9/2023 I am honored to have received the National Scholarship (Top 1%).","categories":[],"tags":[]},{"title":"记录一次逆向查分网站","slug":"记录一次逆向查分网站","date":"2023-08-19T05:10:22.000Z","updated":"2023-08-19T13:35:24.000Z","comments":true,"path":"2023/08/19/记录一次逆向查分网站/","link":"","permalink":"https://xiwen1.github.io/2023/08/19/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E9%80%86%E5%90%91%E6%9F%A5%E5%88%86%E7%BD%91%E7%AB%99/","excerpt":"今天打算将一个学校学生自己做的查询老师给分情况的网站爬了（因为实在联系不上原网站作者，迫不得已出此下策），这是一个根据输入的信息，如教师名称、课程名称、课程号等查询信息并返回的网站，为了覆盖到本学校全部的课程，我首先去学校的教务系统通过课表查询系统轻松拿到了全部课程的信息（没有任何反爬措施），根据全部课程的课程号，我开始设计爬取查给分网站的代码。","text":"今天打算将一个学校学生自己做的查询老师给分情况的网站爬了（因为实在联系不上原网站作者，迫不得已出此下策），这是一个根据输入的信息，如教师名称、课程名称、课程号等查询信息并返回的网站，为了覆盖到本学校全部的课程，我首先去学校的教务系统通过课表查询系统轻松拿到了全部课程的信息（没有任何反爬措施），根据全部课程的课程号，我开始设计爬取查给分网站的代码。 我首先想当然的打开dev tools，将需要的headers全部写入config.json，然后直接requests.get，最后发现什么也没有拿到，原来headers里有一个anthorization的字段，而这个字段里的signature会随着请求信息，cookie以及时间变动，说明接下来到了JS逆向的环节了。 123456789101112131415161718Accept: application/json, text/javascript, */*; q=0.01Accept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6Authorization:hmac id=&quot;AKID5t23df2wfg2r98i5599nadhfmiehiigkgif&quot;, algorithm=&quot;hmac-sha1&quot;, headers=&quot;x-date source&quot;, signature=&quot;2IEpu2dJidmh2vcg7UimNu/YsR8=&quot;Origin: https://s.ringjoys.comReferer: https://s.ringjoys.com/Sec-Ch-Ua: &quot;Not/A)Brand&quot;;v=&quot;99&quot;, &quot;Microsoft Edge&quot;;v=&quot;115&quot;, &quot;Chromium&quot;;v=&quot;115&quot;Sec-Ch-Ua-Mobile: ?0Sec-Ch-Ua-Platform: &quot;Windows&quot;Sec-Fetch-Dest: emptySec-Fetch-Mode: corsSec-Fetch-Site: cross-siteSource: sUser-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36 Edg/115.0.1901.203X-Date: Sat, 19 Aug 2023 12:30:56 GMT 这并不是一个好消息，因为我几乎没有相关的经验，我首先再dev tools的源代码一栏中搜索signature, date, secret等信息，结果一无所获。然后我查看了页面元素，发现表单提交里的input元素里有这样一个属性： 1&lt;input type=&quot;button&quot; id=&quot;submitbutton&quot; value=&quot;提交&quot; onclick=&quot;login(1,true)&quot;&gt; 我又到源代码中去搜索login这个函数，不出意外，0个匹配。 这属于超出我贫瘠的知识范围的情况了，不得已求出openai，我得到了这样的回复： 如果你在网站的开发者工具中搜索不到login函数，有几个可能的原因： 函数不是在页面加载时直接定义的：如果login函数是在异步加载或动态生成的代码中定义的，它可能不会在页面初始加载时出现在开发者工具的源代码中。你可以尝试在网页加载完成后再次搜索。 函数可能被压缩或混淆：有些网站会对JavaScript代码进行压缩或混淆，以减少文件大小或保护代码。这可能会导致函数名发生变化，使其难以在源代码中直接搜索到。 函数可能是从外部资源加载的：login函数可能是从其他文件或外部资源（如CDN）加载的，这样它就不会出现在当前页面的源代码中。你可以尝试追踪网页中加载的脚本文件，查找是否有包含login函数的文件。 dev tools获得不了？我当即放弃了逆向加密算法的尝试，转而看看有没有其他漏洞，事实证明，这是一个错误的决定。 我尝试控制请求的全部header信息与一个真实发送的请求一致，仅仅替换request url param中的课程号。这个策略一开始起效了，但我随即又遇到了问题： 这个api对于x-date这个字段有校验，与x-date当前时间差距稍远的请求会被拒绝 这个服务器对于过于频繁的请求会直接拒绝，我不得不再两个请求之间添加time.sleep 这就导致了我的一套真实signature是能供我发送600左右个请求，而总共的课程号大约有5000个。虽然只要这样重复操作不到10次就可以完成任务，但这样一点都不DRY，有违我的个人原则。 我又将目光放在了逆向js上，摸索dev tools的过程中我才以外发现原来可以直接在html上打断点（是的我这个铸币这都不知道），然后终于通过再submit input上打断点我找到了login这个函数。 我迅速将这个函数添加到了我的代码中，随即又有一个问题出现：这段代码中使用了CryptoJS这个库，而PyExecJS提供的运行环境貌似并不能调用外部库。 铸币的我首先尝试自创hmacsha1编码代码，又踩了几个坑之后直接从crypto-js.js源代码中摘出了模组相关代码复制粘贴进了login函数所在的文件，历经千辛万苦，终于完成了我人生中第一个逆向。（鼓掌） 最后的代码也十分的朴实无华： 1234567891011121314151617181920212223242526272829303132333435363738394041424344import jsonimport requestsimport execjsimport timewith open(&#x27;course_number.txt&#x27;, &#x27;r&#x27;) as f: numbers = f.readlines()data = open(&#x27;scores.json&#x27;, &#x27;a+&#x27;, encoding=&#x27;utf-8&#x27;)scores = []with open(&#x27;login_cp.js&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f: jscode = f.read()context = execjs.compile(jscode)for i, number in enumerate(numbers): number = number.strip() print(number) result = context.call(&#x27;login&#x27;, number, 1) new_url = result[&#x27;url&#x27;] headers = result[&#x27;headers&#x27;] try: time.sleep(0.3) # avoid request rate detection response = requests.get(new_url, headers=headers) json_response = response.json() total = int(json_response[&#x27;total&#x27;]) if total &gt; 10: tot = int(total / 10 + 1) for i in range(2, tot + 1): time.sleep(0.3) result = context.call(&#x27;login&#x27;, number, i) new_url = result[&#x27;url&#x27;] headers = result[&#x27;headers&#x27;] response = requests.get(new_url, headers=headers) extra = response.json() print(extra) scores = scores + extra[&#x27;score&#x27;] print(i, json_response) scores = scores + json_response[&#x27;score&#x27;] except: continuedata.write(json.dumps(&#123;&quot;score&quot;: scores&#125;, indent=4 ,ensure_ascii=False)) 虽然事后看来感觉自己十分的铸币，这个逆向实际上也非常简单，只需要找到login这个函数就可以解决问题，但是这次的逆向经历对我而言还是意义非凡，故作此留念。","categories":[{"name":"科技","slug":"科技","permalink":"https://xiwen1.github.io/categories/%E7%A7%91%E6%8A%80/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://xiwen1.github.io/tags/javascript/"},{"name":"spider","slug":"spider","permalink":"https://xiwen1.github.io/tags/spider/"},{"name":"python","slug":"python","permalink":"https://xiwen1.github.io/tags/python/"}],"author":"xiwen_youmu"},{"title":"yolo系列以及mmdetection代码阅读","slug":"yolov7代码阅读","date":"2023-07-10T19:43:03.000Z","updated":"2023-07-12T08:57:27.000Z","comments":true,"path":"2023/07/11/yolov7代码阅读/","link":"","permalink":"https://xiwen1.github.io/2023/07/11/yolov7%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/","excerpt":"最近一个工作需要大量对比不同的计算机视觉检测模型，需要使用到一个指标ASR，即Attack Successful Rate, 攻击成功率，这个指标需要使用到tp(true positives), 然而tp这个指标通常大部分检测模型不会默认给出, 在yolov5等系列中, 你可以在val.py中轻松找到相应的指标并手动打印, yolov7中并没有给出tp这个变量, 但是依然可以依葫芦画瓢拿到这一变量, 然而事情到了mmdetection中就大为不同, 不同于专精于行人检测的yolo系列, mmdetection是一个极为庞大包罗万象的检测库, 其代码层次结构复杂, 想获得对应的指标, 少不了一场代码阅读. 计算tp(true positives)的方法 在yolov5中，正例数是直接通过tp = (recall * number_targets).round()计算得到的，在各个检测库中，recall通常是会给出的，这时候只需要想办法获得number_targets的值也就是真正例数的数量，就可以计算出tp(recall(召回率) = tp / (tp + fn)，tp + fn即是真正正例的个数) null关于视觉检测库常见指标的解释","text":"最近一个工作需要大量对比不同的计算机视觉检测模型，需要使用到一个指标ASR，即Attack Successful Rate, 攻击成功率，这个指标需要使用到tp(true positives), 然而tp这个指标通常大部分检测模型不会默认给出, 在yolov5等系列中, 你可以在val.py中轻松找到相应的指标并手动打印, yolov7中并没有给出tp这个变量, 但是依然可以依葫芦画瓢拿到这一变量, 然而事情到了mmdetection中就大为不同, 不同于专精于行人检测的yolo系列, mmdetection是一个极为庞大包罗万象的检测库, 其代码层次结构复杂, 想获得对应的指标, 少不了一场代码阅读. 计算tp(true positives)的方法 在yolov5中，正例数是直接通过tp = (recall * number_targets).round()计算得到的，在各个检测库中，recall通常是会给出的，这时候只需要想办法获得number_targets的值也就是真正例数的数量，就可以计算出tp(recall(召回率) = tp / (tp + fn)，tp + fn即是真正正例的个数) null关于视觉检测库常见指标的解释","categories":[],"tags":[{"name":"科技","slug":"科技","permalink":"https://xiwen1.github.io/tags/%E7%A7%91%E6%8A%80/"}]},{"title":"2023-3-20","slug":"2023-3-20","date":"2023-03-20T02:20:08.000Z","updated":"2023-03-20T02:22:53.000Z","comments":true,"path":"2023/03/20/2023-3-20/","link":"","permalink":"https://xiwen1.github.io/2023/03/20/2023-3-20/","excerpt":"曾几何时，我还愿意去想象一些纯粹的梦想。 我愿意写诗，我愿意为一场清雨唏嘘，我愿意尽己所能，用最灵动的词句歌唱自我。 我会做错的选择，我也会为失败消沉，我会一遍遍的怀疑，我是否真的有做梦的资格。 我会愿意为在靠近梦想一点挣扎，我会愿意在每一次愧对与自己的期待之后，告诉自己，你真的赢面很大。 我原以为与其不切实际的挣扎，不如真正认清自己，少一些痛苦，多一些自得。 哪有那么多自得，我再不自觉中遗忘掉的，没有那些脆弱与自卑，只有愿意真正相信自己的勇气，或者错觉。 我宁愿相信错觉。 我宁愿一遍又一遍的忽悠自己，虽然你没有做到，但梦想真的有可能，我应该，再一次又一次，一天又一天，一遍又一遍，每时每刻的告诉自己：你所做的一切，都有一个极为梦幻了理由：为了梦想，青春也不过这些时光。 这是2023-3-20的日记，徯璺","text":"曾几何时，我还愿意去想象一些纯粹的梦想。 我愿意写诗，我愿意为一场清雨唏嘘，我愿意尽己所能，用最灵动的词句歌唱自我。 我会做错的选择，我也会为失败消沉，我会一遍遍的怀疑，我是否真的有做梦的资格。 我会愿意为在靠近梦想一点挣扎，我会愿意在每一次愧对与自己的期待之后，告诉自己，你真的赢面很大。 我原以为与其不切实际的挣扎，不如真正认清自己，少一些痛苦，多一些自得。 哪有那么多自得，我再不自觉中遗忘掉的，没有那些脆弱与自卑，只有愿意真正相信自己的勇气，或者错觉。 我宁愿相信错觉。 我宁愿一遍又一遍的忽悠自己，虽然你没有做到，但梦想真的有可能，我应该，再一次又一次，一天又一天，一遍又一遍，每时每刻的告诉自己：你所做的一切，都有一个极为梦幻了理由：为了梦想，青春也不过这些时光。 这是2023-3-20的日记，徯璺","categories":[{"name":"diary","slug":"diary","permalink":"https://xiwen1.github.io/categories/diary/"}],"tags":[{"name":"diary","slug":"diary","permalink":"https://xiwen1.github.io/tags/diary/"}]},{"title":"“关于多巴胺脱瘾”","slug":"“关于多巴胺脱瘾”","date":"2023-02-16T01:29:55.000Z","updated":"2023-02-16T14:40:04.000Z","comments":true,"path":"2023/02/16/“关于多巴胺脱瘾”/","link":"","permalink":"https://xiwen1.github.io/2023/02/16/%E2%80%9C%E5%85%B3%E4%BA%8E%E5%A4%9A%E5%B7%B4%E8%83%BA%E8%84%B1%E7%98%BE%E2%80%9D/","excerpt":"null每天都上自己的博客看看吧 当代互联网上琳琅满目的娱乐方式极大的提高了线代人们的多巴胺阈值, 在我自己的人生经历中, 这种感觉变得愈发的明显","text":"null每天都上自己的博客看看吧 当代互联网上琳琅满目的娱乐方式极大的提高了线代人们的多巴胺阈值, 在我自己的人生经历中, 这种感觉变得愈发的明显 从小时候能够看到电视就会十分兴奋, 再到对b站的各种视频持续性的上瘾, 再到这些东西不再能让我感到快乐, 每一天都生活变得愈发麻木, 这样的坏处显而易见, 那就是我对于学习这样的事情的耐心和兴趣变得愈发的淡薄, 对于在学习技术与编程的过程中所遇到的困难愈发变得抗拒. 于是, 多巴胺脱瘾, 这就是我为自己所指定的目标, 就是要培养自己的自控能力, 并在这个过程中努力避免来自新媒体以及游戏的高多巴胺刺激内容的诱惑, 这个过程会无聊到感到痛苦, 但是, 痛苦本身就往往意味着成长. 成长并不都是好事, 但是时间不会等人, 走到现在, 我愈发感觉到, 想要被自己真正认可究竟是多么困难的一件事情, 我已经让自己失望过了无数次, 前面的无数次我也是这么说的, 但是没有外界明显的压力的情况下人就是会这样不断的朝着低级娱乐的方向前进, 但这和我们自己的目标是绝对相互矛盾的, 我们不能被别人逼着走, 我尤为讨厌这种失去控制权的感觉, 所以, 我定下每天日记的计划, 让每一天的我都能够回顾自己前一天的所思所想, 自己逼迫自己去不断的反思纠正, 一旦发现有堕落的迹象就要以此文为例, 勉励自己.","categories":[{"name":"diary","slug":"diary","permalink":"https://xiwen1.github.io/categories/diary/"}],"tags":[{"name":"随记","slug":"随记","permalink":"https://xiwen1.github.io/tags/%E9%9A%8F%E8%AE%B0/"}]},{"title":"不开long long见祖宗","slug":"不开long-long见祖宗","date":"2023-01-04T14:13:14.000Z","updated":"2023-01-04T14:28:46.000Z","comments":true,"path":"2023/01/04/不开long-long见祖宗/","link":"","permalink":"https://xiwen1.github.io/2023/01/04/%E4%B8%8D%E5%BC%80long-long%E8%A7%81%E7%A5%96%E5%AE%97/","excerpt":"感受差分的威力吧 题目链接： 4655. 重新排序 - AcWing题库","text":"感受差分的威力吧 题目链接： 4655. 重新排序 - AcWing题库 题目思路一开始我就有了，我想的是贪心+桶排序 贪心很好理解：我们将原数组排序，然后让重叠次数最多的地方填上最大的数字，然后依次后推，这样就得到了一开始最朴素的思路： 使用前缀和计算出一般的sum 将原数组从大到小排序 使用桶排序统计出每个数字被检索的次数 为桶排序的结果排序 然后统计出排序后数组的答案：res = a[i] * t[i] 被检索几次就乘以几次加上去； 相减得到正确答案 需要注意的是: res = a[i] * t[i]会爆int，然后憨憨的我改写成了 res = (ll)(a[i] * t[i])这样写实际上还是会爆int，太蠢了，计算完括号里的内容才ll就晚了，实际上应该这么写： res = (ll) a[i] * t[i]；一定要牢记 同时cmp 函数 return 时也要记得结果加上括号。 但是结果TLE，看了题解发现思路基本一样，但是题解使用的是差分统计检索情况，我不服，但是试了一下确实过了； 难道是因为比起桶排序，差分法少嵌套一层循环？我原本以为本题最吃时间复杂度的不是那里，现在想想确实有可能在那里被卡住； 但是还是长个记性吧，以后遇到这种情况还是用差分吧； 代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int N = 100010;ll sum[N];int n, m;int a[N], t[N];ll res;ll ress;bool cmp(int a, int b)&#123; return (a&gt;b);&#125;int main()&#123; cin&gt;&gt;n; for(int i=1; i&lt;=n; i++) &#123; scanf(&quot;%d&quot;, &amp;a[i]); sum[i] = sum[i-1] + a[i]; &#125; cin&gt;&gt;m; for(int i=1; i&lt;=m; i++) &#123; int l, r; scanf(&quot;%d %d&quot;, &amp;l, &amp;r); res += (sum[r] - sum[l-1]); t[l] ++, t[r+1] --; &#125; for(int i=1; i&lt;=n; i++) &#123; t[i] += t[i-1]; &#125; sort(a+1, a+n+2, cmp); sort(t+1, t+n+2, cmp); for(int i=1; t[i]; i++) &#123; ress += (ll)t[i] * a[i]; &#125; cout&lt;&lt;ress - res&lt;&lt;endl; return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"关于一道集合性状压dp的题目","slug":"关于一道集合性状压dp的题目","date":"2023-01-03T11:49:14.000Z","updated":"2023-01-03T11:59:44.000Z","comments":true,"path":"2023/01/03/关于一道集合性状压dp的题目/","link":"","permalink":"https://xiwen1.github.io/2023/01/03/%E5%85%B3%E4%BA%8E%E4%B8%80%E9%81%93%E9%9B%86%E5%90%88%E6%80%A7%E7%8A%B6%E5%8E%8Bdp%E7%9A%84%E9%A2%98%E7%9B%AE/","excerpt":"null愤怒的小鸟（集合性状压dp） 题目链接： 524. 愤怒的小鸟 - AcWing题库 在题目条件下，两个点可以确定一条过原点的抛物线，有n个点，那么就可以预处理出n^2条抛物线，然后再预处理出每条抛物线最多经过多少个点，以及是哪些点。","text":"null愤怒的小鸟（集合性状压dp） 题目链接： 524. 愤怒的小鸟 - AcWing题库 在题目条件下，两个点可以确定一条过原点的抛物线，有n个点，那么就可以预处理出n^2条抛物线，然后再预处理出每条抛物线最多经过多少个点，以及是哪些点。 这是一个重复覆盖问题，与之相对的就是精确覆盖问题； 这两个问题都已经有的最优解法：dancing links 这是一种数据结构（十字链表），可以优化dfs爆搜； 但是dancing links没学，这里用状压dp去达到相似的效果，优化爆搜； 爆搜的核心是：顺序，要以那种顺序枚举所有方案。以爆搜为基础思考优化方案； 优化方法：记忆化搜索（状压dp），注意到每一个state传入dfs函数都会唯一对应一个res解，因此我们可以使用一个f[state]将其存储下来避免重复计算。 x代表为当前state中未被覆盖的一列，path表示一条可以覆盖当前列的抛物线，new_state就可以用上述的公式求得。 两个过程的区别就是引入状压dp之后，有些已经被计算过的state再dfs再次遇到的时候不会被重复再计算一遍，大概可以优化一半多。 f中存储的就是当前状态下最少的抛物线数； 遇到相同的状态但是线数更多的时候就会被直接排除掉； 看看拦截导弹那一题； path i, j 表示由第i个与第j个猪创建的抛物线经过了那些猪，使用二进制表示。 最后再总结一下这道题目的思路： 使用pair读入个点； 利用任意两个点的位置求出抛物线集合path i, j i与j代表选择了第i和j个点，path中存储的是其经过的所有猪的二进制表达； 设置f为0x3f，f0 为0； 枚举所有的当前猪的位置情况（二进制）i，循环每一种情况中没有被干掉的猪x，枚举所有包含这个猪的抛物线path x, j，那么最终的状态转移方程就是： f[i | path[x][j]] = min(f[i | path[i][j]], f[i]+1) 这样的状态转移方程的思想就是，将每一个f通过可以由哪一条合法的抛物线转移过来进行状态划分；所以这里以终点进行枚举，因为通过终点反推其组合时困难的； 但是这里可以不采用集合的思想，将这道题看作一种记忆化搜索可以更便于你的理解； 看一下如果爆搜当前任意一个抛物线时是否有更好的选择（f中的min），否则就将f更新为f[i] + 1，这样当就可以减去不必要的分枝，不行的转移方案直接剪掉，减少搜索花费； 另外需要注意一点，double比较的时候有可能出现误差，需要自己再写一个cmp函数用于比较； fabs函数用于求浮点数的绝对值； 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include &lt;bits/stdc++.h&gt;#define x first#define y secondusing namespace std;typedef pair&lt;double, double&gt; PDD;const int N = 18, M = 1 &lt;&lt; 18;const double eps = 1e-8; //这里PDD q[N];int n, m;int f[M];int path[N][N];int cmp(double a, double b)&#123; if(fabs(a - b) &lt; eps) return 0; if(a &lt; b) return -1; return 1;&#125;int main()&#123; int T; cin&gt;&gt;T; while(T--) &#123; cin&gt;&gt;n&gt;&gt;m; for(int i=0; i&lt;n; i++) cin&gt;&gt;q[i].x&gt;&gt;q[i].y; memset(path, 0, sizeof path); //记得每一次都要恢复原样 for(int i=0; i&lt;n; i++) &#123; path[i][i] = 1 &lt;&lt; i;//防一手只给一个点的情况 for(int j=0; j&lt;n; j++) &#123; double x1 = q[i].x, y1 = q[i].y; double x2 = q[j].x, y2 = q[j].y; if(!cmp(x1, x2)) continue; // 在同一列的两个点不能作为构建抛物线的点 double a = (y1 / x1 - y2 / x2) / (x1 - x2); double b = y1 / x1 - a * x1; //if(a &gt; 0) continue; 这个写法被坑了一手 if(cmp(a, 0) &gt;= 0) continue; int state = 0; for(int k=0; k&lt;n; k++) &#123; double x3 = q[k].x, y3 = q[k].y; if(!cmp(a* x3 * x3 + b * x3, y3)) state += 1 &lt;&lt; k; &#125; path[i][j] = state; //全部抛物线预处理完成； &#125; &#125; memset(f, 0x3f, sizeof f); //求最小值，初始化为inf； f[0] = 0; //一只猪没杀需要的抛物线数为0 for(int i=0; i+1 &lt; 1 &lt;&lt; n; i++) //dp基操，上来先将f的每一维按照一定顺序枚举一遍；同时全为1的状态不需要枚举， &#123; //因为就是答案，后面已经计算出来了 int x = 0; for(int j=0; j&lt;n; j++)//检查一下哪一位为空 &#123; if((i &gt;&gt; j &amp; 1) == 0) &#123; x = j; break; &#125; &#125; for(int j=0; j&lt;n; j++) &#123; f[i | path[x][j]] = min(f[i | path[x][j]], f[i] + 1); //多思考一下这个状态转移方程是怎么来的 &#125; &#125; cout&lt;&lt;f[(1 &lt;&lt; n) - 1]&lt;&lt;endl; &#125; return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"kmp算法学习笔记","slug":"kmp算法学习笔记","date":"2023-01-02T12:15:35.000Z","updated":"2023-01-02T13:11:20.000Z","comments":true,"path":"2023/01/02/kmp算法学习笔记/","link":"","permalink":"https://xiwen1.github.io/2023/01/02/kmp%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"kmp算法 学习状态机的题目时，遇到一道题需要使用到kmp的知识，于是上csdn学习了一下并整理了如下笔记。","text":"kmp算法 学习状态机的题目时，遇到一道题需要使用到kmp的知识，于是上csdn学习了一下并整理了如下笔记。 讲解视频： https://www.bilibili.com/video/BV1234y1y7pm kmp: 一个人能能走的多远不在于他在顺境时能走的多快，而在于他在逆境时多久能找到曾经的自己。 ————KMP kmp算法用于匹配字符串位置。 给定两个字符串：a, b 定义a为主串，b为模板串，kmp的任务就是检查主串中是否存在等同于b的字串。 null传统暴力方法 设定两个指针i, j，分别指向两个字符串的开头，然后一次向后匹配，若没有匹配，那么i回溯到原本的位置+1，j回溯到最开始继续匹配，直到完全匹配。 这样的方法完全没有从之前的失败经历中吸取到信息从而采取更好的策略，所以世间复杂度很高。 nullkmp给出的答案 kmp定义了一个字符串的前缀与后缀，在上述的方案中，回溯指针时是从头开始的，但是kmp不是这样的，在上述的匹配方案中，遇到第一个未匹配的字符时其前面的子串是完全相同的。我们要做的是找到该字串前缀与后缀相同的位置，然后将指针回溯到这里，这样，前后缀的部分一定是匹配的，可以省去许多无用功。 当回溯一次是若发现下一个字符还是不匹配，那么就让当前匹配的子串（即先前的前后缀）继续查找相同的前后缀，并回溯到这个位置，直到 j 指针指向0，就令i指针持续后移，直到i指针所指的对象与模板串的第一个字符相同。 那么如何查找上述方案中相同前后缀的位置呢，这里我们使用一个ne[]数组对模板串采用dp的方式进行记录其每个子串的前后缀长度情况。具体方法实际上还是kmp的思想。 具体方法如下： 设置两个指针i，j，i=2，j=0；检查pi == pj+1; 如果匹配，那么对于1-i的子串，他的最长公共前后缀的长度就是ne[]，而ne[i] = j+1. 如果不匹配，则回溯j指针，使j = ne[j]，直到匹配成功（kmp思想，这里将1-j的子串看作当前的前后公共子串） 代码： 1234567891011121314151617181920212223242526272829303132333435#include &lt;iostream&gt;using namespace std;const int N=1e7+10;char p[N],s[N];//next数组表示的是不匹配时子串下标退回的位置//比如next[i]=j就表示在子串中p[1~j]=p[i-j+1~i]//所以子串直接退回到j下标继续和主串进行模式匹配直到匹配成功为止int ne[N];int n,m;int main()&#123; cin&gt;&gt;n&gt;&gt;p+1&gt;&gt;m&gt;&gt;s+1; //求next数组的过程 //类似于KMP匹配过程 for(int i=2,j=0;i&lt;=n;i++) &#123; while(j&amp;&amp;p[i]!=p[j+1]) j=ne[j]; if(p[i]==p[j+1]) j++; ne[i]=j; &#125; //KMP匹配过程 for(int i=1,j=0;i&lt;=m;i++) &#123; //如果子串没有退回到起点，并且主串和子串不匹配 while(j&amp;&amp;s[i]!=p[j+1]) j=ne[j];//j退回到重合部分的终点位置 if(s[i]==p[j+1]) j++; //匹配成功 if(j==n) &#123; cout&lt;&lt;i-n&lt;&lt;&quot; &quot;; j=ne[j]; &#125; &#125; return 0;&#125; 示例题目：周期 题目链接： 141. 周期 - AcWing题库 null题目思路： 需要注意到kmp中的前缀ne[]函数与循环节之间的关系，如果在某一个前缀长度为s中存在长度为三的循环节，那么对应到该前缀子串的ne[]数组的特征就是s % (s-ne[s]) == 0，且ne[s]不等于0； 证明： 作图，暂且称子串减去公共前后缀的部分为循环节，那么就可以发现循环节一定等于其后的一段等长的节，因为前后缀相等，循环节后面一节就是后缀开头的一节，而这一节同时又是前缀的第二节，那么可以得到前缀中第一节等于第二节，后缀则也是如此，而后缀的第二节又是前缀的第三节···如此这般，可以推导出当整除关系下，我们假设的循环节就是真正的循环节。 代码如下： 1234567891011121314151617#include&lt;cstdio&gt;int t,i,j,n,nex[1000005];char a[1000005];int main()&#123; while(scanf(&quot;%d&quot;,&amp;n),n)&#123; scanf(&quot;%s&quot;,a+1); printf(&quot;Test case #%d\\n&quot;,++t); for(i=2,j=0;i&lt;=n;i++)&#123;//最基本的 next[] 数组求法 while(j&amp;&amp;a[i]!=a[j+1])j=nex[j]; if(a[i]==a[j+1])j++;nex[i]=j; &#125; for(i=2;i&lt;=n;i++)//由于1～1只有一个字母，只能是它本身构成长度为1的循环，所以从2开始枚举 if(i%(i-nex[i])==0&amp;&amp;nex[i])//判断时还要注意nex[i]是否为0 printf(&quot;%d %d\\n&quot;,i,i/(i-nex[i]));//如果i含有长度大于1的最小循环元，输出i的长度(即i)以及最大循环次数K(即i-nex[i]) printf(&quot;\\n&quot;);//记得输出一个空行 &#125;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"每日一题 第二周","slug":"每日一题-第二周","date":"2023-01-01T13:12:38.000Z","updated":"2023-01-02T15:22:48.000Z","comments":true,"path":"2023/01/01/每日一题-第二周/","link":"","permalink":"https://xiwen1.github.io/2023/01/01/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-%E7%AC%AC%E4%BA%8C%E5%91%A8/","excerpt":"选数异或 题目： https://www.acwing.com/activity/content/problem/content/7908/ null思路： 类似于前缀和，相当于预先总结好那个范围中有可以异或匹配的数字对，然后查询时就会十分方便。这道题中使用了两种技巧： 利用unordered_map做hash表将每对数字对记录下来，数字为关键字，映射值为数字的下标。 利用 dp 做对于预先总结数字对的匹配情况，dp[i]，代表再 1 - i 中含有的数字对中，左边界最大的值所在的下标。这样维护时只需要 dp[i]=max(dp[i−1],last[a⊕x]) 这是hash表查询的优势也发挥出来了。","text":"选数异或 题目： https://www.acwing.com/activity/content/problem/content/7908/ null思路： 类似于前缀和，相当于预先总结好那个范围中有可以异或匹配的数字对，然后查询时就会十分方便。这道题中使用了两种技巧： 利用unordered_map做hash表将每对数字对记录下来，数字为关键字，映射值为数字的下标。 利用 dp 做对于预先总结数字对的匹配情况，dp[i]，代表再 1 - i 中含有的数字对中，左边界最大的值所在的下标。这样维护时只需要 dp[i]=max(dp[i−1],last[a⊕x]) 这是hash表查询的优势也发挥出来了。 null题解： 必要异或运算性质： 归零律：a⊕a=0 结合律: a⊕b⊕c=a⊕(b⊕c)=(a⊕b)⊕c 交换律：a⊕b=b⊕a 因此, a⊕b=x⟺a⊕b⊕x=0⟺a⊕x=b 因此对于一个数a， 与a配对的数可以直接计算得出， 即为a⊕xa⊕x 递推优化 不妨将满足题意的两个数a, b简称为数对， a、b中较小的下标叫下界. 定义dp[i]为[1, i]区间中所有数对中的最大下界 如样例1 2 3 4, 只有2 3的异或为1. 对于区间[1, 2]它不包含数对{2， 3}所以 dp[2] 应该为一个无效值， 取0 对于区间[1, 3] [1, 4]， 都仅且包含数对{2, 3}, 所以dp[3] = dp[4] = 2 dp[r]的实际意义想必大家都看出来了， 就是当查询区间[l, r], 右边界为r时， 至少包含一个数对时的左边界最大值, 所以如果l小于等于这个左边界最大值， [l, r]区间内就至少有一个数对。 代码实现 用哈希表last[i]记录值i最后一次出现时的位置下标， dp[i]的求法是： 若ai⊕xai⊕x最后一次出现的下标要大于dp[i-1]， 则dp[i] = last[ai⊕x]last[ai⊕x], 否则dp[i] = dp[i-1] 即 dp[i]=max(dp[i−1],last[a⊕x]) null代码： 12345678910111213141516171819202122232425262728#include &lt;bits/stdc++.h&gt;using namespace std;int dp[100010];//使用一种类似于前缀和加dp的方法//代码中使用了unordered_map，可以直接朴素地理解为一种不用担心越界的数组，方便你打hash表int main()&#123; int n, m, x; cin&gt;&gt;n&gt;&gt;m&gt;&gt;x; unordered_map&lt;int, int&gt; last; for(int i=1; i&lt;=n; i++) &#123; int a; cin&gt;&gt;a; dp[i] = max(dp[i-1], last[x ^ a]); last[a] = i; &#125; for(int i=0; i&lt;m; i++) &#123; int l, r; cin&gt;&gt;l&gt;&gt;r; cout&lt;&lt;(dp[r] &gt;= l ? &quot;yes&quot; : &quot;no&quot;)&lt;&lt;endl; &#125; return 0;&#125; 求和 题目： 4644. 求和 - AcWing题库 使用了前缀和，但是实际上可以不用，求出总和依次相乘后除以2即可 1234567891011121314151617181920212223242526272829#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int N = 200010;int sum[N];int a[N];ll ans;int main()&#123; int n; cin&gt;&gt;n; for(int i=1; i&lt;=n; i++) &#123; cin&gt;&gt;a[i]; sum[i] = sum[i-1] + a[i]; &#125; for(int i=1; i&lt;=n; i++) &#123; ll cheng = (ll)(sum[n] - sum[i]); ans += (ll)cheng * a[i]; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"多重背包的二进制优化","slug":"多重背包的二进制优化","date":"2023-01-01T08:01:02.000Z","updated":"2023-01-01T08:53:51.000Z","comments":true,"path":"2023/01/01/多重背包的二进制优化/","link":"","permalink":"https://xiwen1.github.io/2023/01/01/%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BC%98%E5%8C%96/","excerpt":"原理：对于任何一个数字而言，都可以分拆为几个单个的2^k相加，所以依据该物品的个数s，将其依次拆为若干个2^k组成的物品堆，将他们的体积和价值合并看待，之后再按照01背包的方法解决即可，因为这些2^k能够组合出0-s之间的任何一个数目","text":"原理：对于任何一个数字而言，都可以分拆为几个单个的2^k相加，所以依据该物品的个数s，将其依次拆为若干个2^k组成的物品堆，将他们的体积和价值合并看待，之后再按照01背包的方法解决即可，因为这些2^k能够组合出0-s之间的任何一个数目 代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 2010, M = 12010;int f[N], v[M], w[M];int n, m;int main()&#123; cin&gt;&gt;n&gt;&gt;m; int cnt = 0; for(int i=1; i&lt;=n; i++) &#123; int a, b, s; cin&gt;&gt;a&gt;&gt;b&gt;&gt;s; int k=1; while(k &lt;= s) &#123; cnt ++; v[cnt] = a * k; w[cnt] = b * k; s -= k; k *= 2; &#125; if(s &gt; 0) &#123; cnt ++; v[cnt] = a * s; w[cnt] = b * s; &#125; &#125; n = cnt; for(int i=1; i&lt;=n; i++) &#123; for(int j=m; j&gt;=v[i]; j--) &#123; f[j] = max(f[j], f[j-v[i]]+w[i]); &#125; &#125; cout&lt;&lt;f[m]; return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"背包问题：能量石","slug":"背包问题：能量石","date":"2022-12-31T11:32:11.000Z","updated":"2022-12-31T11:34:04.000Z","comments":true,"path":"2022/12/31/背包问题：能量石/","link":"","permalink":"https://xiwen1.github.io/2022/12/31/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%EF%BC%9A%E8%83%BD%E9%87%8F%E7%9F%B3/","excerpt":"能量石 链接： 734. 能量石 - AcWing题库 思路： 因为吃能量石的顺序会对物品的价值产生影响，所以要考虑的维度增多了，这时候要首先利用贪心的思路对能量石进行预先排序，注意到对于两件物品时，全部吃掉的情况下，s[ i ] * l[ i+1 ] 即为当前顺序下会损失的能量值，这个值当然越小越好，所以对于假设要吃的所有物品，s/l的值越小就说明它一定要先吃。 之前的考虑中没有考虑能量不能将为负数的情况，实际上只要将状态表达设置为时间恰好为j时的总能量值那么当能量降低为负数时就会对f产生负影响，只要遍历一遍求最大值就是题目所需的答案。","text":"能量石 链接： 734. 能量石 - AcWing题库 思路： 因为吃能量石的顺序会对物品的价值产生影响，所以要考虑的维度增多了，这时候要首先利用贪心的思路对能量石进行预先排序，注意到对于两件物品时，全部吃掉的情况下，s[ i ] * l[ i+1 ] 即为当前顺序下会损失的能量值，这个值当然越小越好，所以对于假设要吃的所有物品，s/l的值越小就说明它一定要先吃。 之前的考虑中没有考虑能量不能将为负数的情况，实际上只要将状态表达设置为时间恰好为j时的总能量值那么当能量降低为负数时就会对f产生负影响，只要遍历一遍求最大值就是题目所需的答案。 代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 10010;int f[N];int n;struct Stone&#123; int s, e, l; bool operator&lt; (const Stone &amp;W) const &#123; return s * W.l &lt; l * W.s; &#125;&#125;stone[N];int main()&#123; int T; cin&gt;&gt;T; for(int C=0; C&lt;T; C++) &#123; int m = 0; cin&gt;&gt;n; for(int i=0; i&lt;n; i++) &#123; int s, e, l; cin&gt;&gt;s&gt;&gt;e&gt;&gt;l; stone[i] = &#123;s, e, l&#125;; m += s; &#125; sort(stone, stone+n); memset(f, -0x3f, sizeof f); f[0] = 0; for(int i=0; i&lt;n; i++) &#123; int s = stone[i].s, e = stone[i].e, l = stone[i].l; for(int j=m; j&gt;=s; j--) &#123; f[j] = max(f[j], f[j-s]+e-(j-s)*l); //在所有能量石降为负数时就自然不是最大值了，这样就省去了判断不能小于0的情况； &#125; &#125; int res = 0; for(int i=0; i&lt;=m; i++) &#123; res = max(res, f[i]); &#125; printf(&quot;Case #%d: %d\\n&quot;, C+1, res); &#125; return 0; &#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"每日一题2022-10-30","slug":"每日一题2022-10-30","date":"2022-12-30T14:52:37.000Z","updated":"2022-12-30T14:54:45.000Z","comments":true,"path":"2022/12/30/每日一题2022-10-30/","link":"","permalink":"https://xiwen1.github.io/2022/12/30/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%982022-10-30/","excerpt":"上课睡觉 题目： https://www.acwing.com/problem/content/description/4369/ 思路： 最终分配结果是每一堆的个数相同，则总堆数一定是sum的约数。补充知识：对于每一个数的平均约数都是logn个，推理过程如下： 1对于一个数n，1-n中含有的2的倍数有n/2个，3的倍数有n/3个，以此类推，则总倍数有：1+n/2+n/3+......+n/n = nlnn个，然后倍数与约数又是一对相对的概念，所以约数大概为lnn个，为logn级别","text":"上课睡觉 题目： https://www.acwing.com/problem/content/description/4369/ 思路： 最终分配结果是每一堆的个数相同，则总堆数一定是sum的约数。补充知识：对于每一个数的平均约数都是logn个，推理过程如下： 1对于一个数n，1-n中含有的2的倍数有n/2个，3的倍数有n/3个，以此类推，则总倍数有：1+n/2+n/3+......+n/n = nlnn个，然后倍数与约数又是一对相对的概念，所以约数大概为lnn个，为logn级别 所以解本题的思路为：寻找不同的cnt满足sum，然后依次检验cnt是否合法，最后找出最小的cnt(因为答案是n-sum/cnt(动多少次就是原堆数减去现堆数)) 如何检验是否合法：注意到能合并的堆一定是相互靠近的（这时候不要模拟实际的过程去思考，要抽象出最便于处理的本质），所以题目的本质就是将所给序列分割成一段段，每段sum都是cnt。 使用差分与前缀和的知识。一定可以确定的是，每一堆的石子必然大于等于0. 现预设一个cnt，然后从第一段开始检验，看看是否能够满足这个预设的cnt，然后再到后面去检验。 这样的话：枚举cnt是否成立时间复杂度为n，枚举约数时间复杂度为logn，总时间复杂度为nlogn，可以满足。 1e6下约数最多为240，则最多需要计算240*1e6次，c++一秒可以计算1e8次，所以稳过。 示例代码： 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;bits/stdc++.h&gt;using namespace std;int n;int w[100010];bool check(int cnt) &#123; for(int i=0, s=0; i&lt;n; i++) &#123; s += w[i]; if(s &gt; cnt) return false; if(s == cnt) s=0; &#125; return true;&#125;int main()&#123; int T; cin&gt;&gt;T; while( T-- ) &#123; cin&gt;&gt;n; int sum=0; for(int i=0; i&lt;n; i++) &#123; scanf(&quot;%d&quot;, &amp;w[i]); sum += w[i]; &#125; for(int i=n; i&gt;0; i--) &#123; if(sum % i == 0 &amp;&amp; check(sum/i)) &#123; printf(&quot;%d\\n&quot;, n-i); break; &#125; &#125; &#125; return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"练习","slug":"练习","permalink":"https://xiwen1.github.io/tags/%E7%BB%83%E4%B9%A0/"}]},{"title":"初学数组模拟邻接表的一些理解","slug":"初学数组模拟邻接表的一些理解","date":"2022-12-24T09:59:17.000Z","updated":"2022-12-24T10:00:19.000Z","comments":true,"path":"2022/12/24/初学数组模拟邻接表的一些理解/","link":"","permalink":"https://xiwen1.github.io/2022/12/24/%E5%88%9D%E5%AD%A6%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E9%82%BB%E6%8E%A5%E8%A1%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/","excerpt":"nullhead与next数组中保存的是ver数组的下标 12345//加入有向边(x, y)，权值为z；void add(int x, int y, int z) &#123; ver[++tot] = y, edge[tot] = z; //真实数据 next[tot] = head[x], head[x] = tot; &#125; null理解方法： tot为每一个数据编号，从第一个输入开始一直往后排，至于数据的输入顺序有关，与数据本身的性质无关 ver[tot]因此就表示新录入一个数据，编号tot； 对于一个以邻接表表示的有向图而言，表头head的下表表示起点的值，head的内容指向该起点最新加入的一条邻边终点的编号（即输入时的tot），next[tot]表示下表为tot的数据的后面接的数的编号；因为表头指针更新的是最新插入的数据，所以无需查找到末尾直接更新表头指向即可，因此有了： next[tot] = head[x], head[x] = tot; 这样的操作。","text":"nullhead与next数组中保存的是ver数组的下标 12345//加入有向边(x, y)，权值为z；void add(int x, int y, int z) &#123; ver[++tot] = y, edge[tot] = z; //真实数据 next[tot] = head[x], head[x] = tot; &#125; null理解方法： tot为每一个数据编号，从第一个输入开始一直往后排，至于数据的输入顺序有关，与数据本身的性质无关 ver[tot]因此就表示新录入一个数据，编号tot； 对于一个以邻接表表示的有向图而言，表头head的下表表示起点的值，head的内容指向该起点最新加入的一条邻边终点的编号（即输入时的tot），next[tot]表示下表为tot的数据的后面接的数的编号；因为表头指针更新的是最新插入的数据，所以无需查找到末尾直接更新表头指向即可，因此有了： next[tot] = head[x], head[x] = tot; 这样的操作。","categories":[{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"关于django用户系统的搭建流程","slug":"关于django用户系统的搭建流程","date":"2022-12-18T09:09:30.000Z","updated":"2022-12-30T14:54:18.000Z","comments":true,"path":"2022/12/18/关于django用户系统的搭建流程/","link":"","permalink":"https://xiwen1.github.io/2022/12/18/%E5%85%B3%E4%BA%8Edjango%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/","excerpt":"用户系统的搭建和登录界面的完成 null1.1 向django自带数据库中添加自定义的类时需要注意的操作 启动uwsgi.ini服务之后sudo uwsgi --ini scripts/uwsgi.ini不要直接关闭终端，这样导致服务难以被关闭","text":"用户系统的搭建和登录界面的完成 null1.1 向django自带数据库中添加自定义的类时需要注意的操作 启动uwsgi.ini服务之后sudo uwsgi --ini scripts/uwsgi.ini不要直接关闭终端，这样导致服务难以被关闭 如果无法关闭，则使用sudo fuser -k 8000/tcp杀死在8000端口的进程，在运行ini 登陆界面中的每个函数都要实现三个部分： views实现函数的本体 urls中实现函数的映射 js中实现对应的调用 每一个处理请求的函数都要传入一个参数:request，请求登陆也是如此，并且导入包：from django.http import JsonResponse json文件：通用的序列化存储字典等内容的文件 path中填写的url最后一定带上/，否则后面接新的东西时会出错 注意为文件添加可执行权限的操作是 chmod +x filename js实现三秒后刷新： 123setTimeout(function ()&#123; window.location.reload();&#125;, 3000);","categories":[{"name":"科技","slug":"科技","permalink":"https://xiwen1.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"笔记","slug":"科技/笔记","permalink":"https://xiwen1.github.io/categories/%E7%A7%91%E6%8A%80/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://xiwen1.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"使用django+canvas完成简单的网页游戏","slug":"使用django-canvas完成简单的网页游戏","date":"2022-12-17T03:45:33.000Z","updated":"2022-12-24T09:59:33.000Z","comments":true,"path":"2022/12/17/使用django-canvas完成简单的网页游戏/","link":"","permalink":"https://xiwen1.github.io/2022/12/17/%E4%BD%BF%E7%94%A8django-canvas%E5%AE%8C%E6%88%90%E7%AE%80%E5%8D%95%E7%9A%84%E7%BD%91%E9%A1%B5%E6%B8%B8%E6%88%8F/","excerpt":"最近买了acwing的django框架课学习使用django进行简单的网页游戏开发，虽然现在还没有学完，但是目前对于javascript使用canvas进行简单的游戏开发已经有了相对之前非常多的心得，故有此篇，之后关于用户系统和thrift联机对战的内容会单独出一篇文章","text":"最近买了acwing的django框架课学习使用django进行简单的网页游戏开发，虽然现在还没有学完，但是目前对于javascript使用canvas进行简单的游戏开发已经有了相对之前非常多的心得，故有此篇，之后关于用户系统和thrift联机对战的内容会单独出一篇文章 初识django null1. 1进行远程开发的前期工作 null为什么要远程开发： 因为对于当下的服务器部署应用开发而言，云盘，数据库以及 app 本身会被存放在不同的服务器中，这样在本地的环境与线上环境会产生较大的差异，需要进行调试的时候也会遇上难以解决的结构问题，故而最好的方法是直接通过ssh远程登陆到服务器上，直接在服务器上进行远程开发，这样就能根本上避免掉从本地部署到服务器过程中会出现的一系列问题。 null工具选择： 由于是django远程开发，故而有主要有三种选择： 直接在终端使用vim或者nano进行代码编写； 在本地通过vscode远程登录到服务器上，使用code本身完善的图形化界面进行代码编写； 在本地使用pycharm通过sftp文件模式进行简介的远程代码编写； 第一种是给大佬使用的，在使用之前你需要对vim或者nano的操作有相当程度的熟悉，但是即使不使用这种方式编写代码，也要有对这两个工具使用方法最基本的了解，因为对于需要管理员权限的文件的操作通常还是要在vim中进行的； 第二种是我目前开发所使用的方法，使用vscode相较于直接使用终端开发的优点主要在于方便的文件结构图视，熟悉的操作方式，以及更为好看的界面，但是受限于服务器本身孱弱的性能（1c2g），vscode的代码补全功能体验上阉割了不少，但是总归好过vim； 第三种方式应该是效率最高的方式，没有采用的原因是我自身更加希望通过避免使用ide来减少对其的依赖，因为ide过于周到的一条龙服务会使没有什么基础的小白对于一个项目所需要的各种知识的掌握有所欠缺，这点在后面会说明 null服务器搭建： 服务器选择的是阿里云的云服务器，1c2g，可以直接选择试用的服务器先白嫖一个月再说，在服务器中又加了一层docker容器，优点是方便将你的成果直接打包迁移，省去了配环境的许多工作，同时将不同的服务部署在不同的容器中，管理起来也更加安全方便，关于docker的各种指令可以参考以下网址： https://www.acwing.com/file_system/file/content/whole/index/content/3074146/ null1.2 django项目的文件结构的介绍 项目初期可以对于整个游戏的规划不那么多，只先实现最基本的功能，只要你的文件结构合理，代码基地很扎实，那么后面依照模板添加新的内容也是很容易的，因此首先，我将这个游戏分成了三个板块：single mode, multi mode, settings. 之后止血药在项目的不同结构中均实现着三个板块即可. 对于项目文件的划分，主要分为：models, views, urls，这三者是主要实现django业务逻辑的模块，此外还有static文件夹存放静态文件(css, js, images)，以及templates存放html等基本网页，scripts存放配置脚本文件等。下面讲详细介绍这些文件： models实现的是“类”这样一个概念，它定义了数据库中一个类应有的各项属性，以及不同类之间的继承关系已方便数据库的管理 views实现的是整个项目中需要使用的所有方法，所有涉及python，django的操作，链路，各种逻辑都是通过views.py中的方法实现的，例如urls中的mappings是通过path和include方法实现的，某个映射的最终结果都是一个方法，在这个方法中会return一个str来作为最终返回的网页，当然这个str也并非说的那么简单，实际使用中，会使用一种叫render()的十分方便的函数. urls实现的是从浏览器地址栏中输入内容到实际框架中方法（资源）的映射函数，如上所述，主要包括path()和include()，path是将url对应到方法的函数，include的是将一类开头的url对应到另一个urls.py文件中的mapping的方法。 static存放所有服务器提供服务所需要的静态文件，与之对应的media文件夹主要存放用户上传的静态文件，static与media都需要在app文件夹中的settings.py文件中添加对应的root(实际位置)和url(对应映射)注册，django会有自带的方法寻找这些static文件，另外通过命令python3 manage.py collectstatic可以网站中不同app的静态文件夹全部收集存放在一个总的static文件夹中，因此常常将这个命令直接添加到你调试所需要的shell脚本中。 templates没什么好说的，就是存放html文件。 script存放你调试网页，或者部署uwsgi的脚本文件，调试网页的脚本文件的实际作用类似于ide中的构建，将你刚刚写好的代码以服务需要的方式部署下来（因为方便写代码的文件结构通常不方便部署），例如游戏主题的js文件一共会有上千行，有着大量的class和复杂的继承关系，写到一个文件中通常就是一个灾难，但是如果通过树型的文件结构将他们管理起来就会十分利于开发，但是这样的文件结构在导入html时会十分麻烦，且需要经常更新，所以可以在script中利用shell编程将所有的js文件收集统筹到一个js文件中，最后导入这一个文件即可，之后每当写了新的代码只需要再运行一次这个代码即可。 至此django项目的文件结构就介绍完了，而我的游戏项目存放在了https://gitee.com/xiwen-youmu/my-first-django 这个仓库中 null1.3 从哪里开始 首先，你可以掏出你已经配置好环境的祖传docker镜像，或者创建一个新的docker容器，配置好django包，安装pip与python，nano，tmux（终端开服需要），然后就可以直接创建django项目了。创建一个新的django项目所需要的命令行代码这里就不再赘述","categories":[{"name":"科技","slug":"科技","permalink":"https://xiwen1.github.io/categories/%E7%A7%91%E6%8A%80/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://xiwen1.github.io/tags/javascript/"},{"name":"django","slug":"django","permalink":"https://xiwen1.github.io/tags/django/"},{"name":"远程开发","slug":"远程开发","permalink":"https://xiwen1.github.io/tags/%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91/"},{"name":"docker","slug":"docker","permalink":"https://xiwen1.github.io/tags/docker/"}],"author":"xiwen_youmu"},{"title":"关于本博客的一些希望","slug":"关于本博客的一些希望","date":"2022-12-16T11:13:11.000Z","updated":"2022-12-16T12:03:21.000Z","comments":true,"path":"2022/12/16/关于本博客的一些希望/","link":"","permalink":"https://xiwen1.github.io/2022/12/16/%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%8C%E6%9C%9B/","excerpt":"关于本博客的一些初衷，首先写在这里，以勉励自己","text":"关于本博客的一些初衷，首先写在这里，以勉励自己 null为什么要写博客 写博客的目的不在于给别人看，博客对我而言是一个特殊的笔记本，与普通的笔记本不同的是，博客中的内容并不是直接来源于一本书，一堂课，或者某一个视频，一篇博客的内容的直接生产者是我自己，一篇博客代表这我自己在这一段时间中获得的知识与感想的集合，它自成我的体系，它独属于我自己，写博客的过程，更似写一篇日记，我需要将自己的所思所想从心底全部引出，落在纸上（乐），这本身就是一种回顾，总结与加深，通过写博客，可以让一个人培养起不断反思，不断求深求全的习惯，我想这对自己的发展是大有脾益的。 提示：&lt;!-- more --&gt;可以手动分割文章，善用","categories":[{"name":"随记","slug":"随记","permalink":"https://xiwen1.github.io/categories/%E9%9A%8F%E8%AE%B0/"}],"tags":[{"name":"总结","slug":"总结","permalink":"https://xiwen1.github.io/tags/%E6%80%BB%E7%BB%93/"}]}],"categories":[{"name":"科技","slug":"科技","permalink":"https://xiwen1.github.io/categories/%E7%A7%91%E6%8A%80/"},{"name":"diary","slug":"diary","permalink":"https://xiwen1.github.io/categories/diary/"},{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"笔记","slug":"科技/笔记","permalink":"https://xiwen1.github.io/categories/%E7%A7%91%E6%8A%80/%E7%AC%94%E8%AE%B0/"},{"name":"随记","slug":"随记","permalink":"https://xiwen1.github.io/categories/%E9%9A%8F%E8%AE%B0/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://xiwen1.github.io/tags/javascript/"},{"name":"spider","slug":"spider","permalink":"https://xiwen1.github.io/tags/spider/"},{"name":"python","slug":"python","permalink":"https://xiwen1.github.io/tags/python/"},{"name":"科技","slug":"科技","permalink":"https://xiwen1.github.io/tags/%E7%A7%91%E6%8A%80/"},{"name":"diary","slug":"diary","permalink":"https://xiwen1.github.io/tags/diary/"},{"name":"随记","slug":"随记","permalink":"https://xiwen1.github.io/tags/%E9%9A%8F%E8%AE%B0/"},{"name":"算法","slug":"算法","permalink":"https://xiwen1.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"练习","slug":"练习","permalink":"https://xiwen1.github.io/tags/%E7%BB%83%E4%B9%A0/"},{"name":"笔记","slug":"笔记","permalink":"https://xiwen1.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"django","slug":"django","permalink":"https://xiwen1.github.io/tags/django/"},{"name":"远程开发","slug":"远程开发","permalink":"https://xiwen1.github.io/tags/%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91/"},{"name":"docker","slug":"docker","permalink":"https://xiwen1.github.io/tags/docker/"},{"name":"总结","slug":"总结","permalink":"https://xiwen1.github.io/tags/%E6%80%BB%E7%BB%93/"}]}